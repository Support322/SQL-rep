#Задача 1 СОЗДАНИЕ ТАБЛИЦЫ
CREATE TABLE genre(
    genre_id INT PRIMARY KEY AUTO_INCREMENT, 
    name_genre VARCHAR(30)
);

#Задача 2 ВЫБОРКА ДАННЫХ
Вывести информацию о всех книгах, хранящихся на складе.
SELECT * FROM book

#Задача 3
Выбрать авторов, название книг и их цену из таблицы book.
SELECT author, title, price FROM book

#Задача 4
Выбрать названия книг и авторов из таблицы book, для поля title задать имя(псевдоним) Название, для поля author –  Автор. 
select title as Название, author as Автор from book

#Задача 5
Для упаковки каждой книги требуется один лист бумаги, цена которого 1 рубль 65 копеек. 
Посчитать стоимость упаковки для каждой книги (сколько денег потребуется, чтобы упаковать все экземпляры книги). 
В запросе вывести название книги, ее количество и стоимость упаковки, последний столбец назвать pack. 
select title, amount, amount * 1.65 as pack from book

#Задача 6
В конце года цену каждой книги на складе пересчитывают – снижают ее на 30%. 
Написать SQL запрос, который из таблицы book выбирает названия, авторов, количества и вычисляет новые цены книг. 
Столбец с новой ценой назвать new_price, цену округлить до 2-х знаков после запятой.
SELECT title, author, amount, ROUND((price * 0.7), 2) as new_price
from book

#Задача 7
При анализе продаж книг выяснилось, что наибольшей популярностью пользуются книги Михаила Булгакова, на втором месте книги Сергея Есенина. 
Исходя из этого решили поднять цену книг Булгакова на 10%, а цену книг Есенина - на 5%. 
Написать запрос, куда включить автора, название книги и новую цену, последний столбец назвать new_price. Значение округлить до двух знаков после запятой.
SELECT author, title,
    ROUND(IF(author="Булгаков М.А.", price * 1.1, IF(author="Есенин С.А.", price * 1.05, price)), 2) AS new_price
FROM book

#Задача 8
Вывести автора, название  и цены тех книг, количество которых меньше 10.
SELECT author, title, price from book where amount < 10

#Задача 9
Вывести название, автора,  цену  и количество всех книг, цена которых меньше 500 или больше 600, а стоимость всех экземпляров этих книг больше или равна 5000.
SELECT title, author, price, amount from book where ((price < 500) OR (price > 600)) AND (price * amount >=5000)

#Задача 10
Вывести название и авторов тех книг, цены которых принадлежат интервалу от 540.50 до 800 (включая границы),  а количество или 2, или 3, или 5, или 7 .
SELECT title, author from book where price between 540.50 and 800.01 AND amount IN (2, 3, 5, 7)

#Задача 11
Вывести  автора и название  книг, количество которых принадлежит интервалу от 2 до 14 (включая границы). 
Информацию  отсортировать сначала по авторам (в обратном алфавитном порядке), а затем по названиям книг (по алфавиту).
SELECT author, title from book where amount between 2 and 14 order by author desc, title asc

#Задача 12
Вывести название и автора тех книг, название которых состоит из двух и более слов, а инициалы автора содержат букву «С». 
Считать, что в названии слова отделяются друг от друга пробелами и не содержат знаков препинания, между фамилией автора и инициалами обязателен пробел, инициалы записываются без пробела в формате: буква, точка, буква, точка. 
Информацию отсортировать по названию книги в алфавитном порядке.
SELECT title, author from book where 
title like "_% %" and 
(author like "С%" or author like "% С.%" or author like "%С.")order by title asc

#Задача 13 ЗАПРОСЫ, ГРУППОВЫЕ ОПЕРАЦИИ
Отобрать различные (уникальные) элементы столбца amount таблицы book.
select distinct(amount) from book

#Задача 14
Посчитать, количество различных книг и количество экземпляров книг каждого автора , хранящихся на складе.  
Столбцы назвать Автор, Различных_книг и Количество_экземпляров соответственно.
select author as Автор, count(title) as Различных_книг, sum(amount) as Количество_экземпляров from book group by author

#Задача 15
Вывести фамилию и инициалы автора, минимальную, максимальную и среднюю цену книг каждого автора . 
Вычисляемые столбцы назвать Минимальная_цена, Максимальная_цена и Средняя_цена соответственно.
select author, 
min(price) as Минимальная_цена, 
max(price) as Максимальная_цена,
avg(price) as Средняя_цена 
from book group by author

#Задача 16
Для каждого автора вычислить суммарную стоимость книг S (имя столбца Стоимость)
Также вычислить налог на добавленную стоимость  для полученных сумм (имя столбца НДС ) , который включен в стоимость и составляет 18% (k=18).
Также стоимость книг  (Стоимость_без_НДС) без него. 
Значения округлить до двух знаков после запятой.
select
author,
ROUND(SUM(price * amount), 2) as Стоимость,
ROUND(SUM(price * amount * 18 / 100)/(1 + (18 / 100)), 2) as НДС,
ROUND(SUM(price * amount) / (1 + (18 / 100)), 2) as Стоимость_без_НДС
from book group by author

#Задача 17
Вывести цену самой дешевой книги, цену самой дорогой и среднюю цену всех книг на складе. 
Названия столбцов Минимальная_цена, Максимальная_цена, Средняя_цена соответственно. 
Среднюю цену округлить до двух знаков после запятой. 
select 
ROUND(min(price),2) as Минимальная_цена,
ROUND(max(price),2) as Максимальная_цена,
ROUND(avg(price),2) as Средняя_цена
from book

#Задача 18
Вычислить среднюю цену и суммарную стоимость тех книг, количество экземпляров которых принадлежит интервалу от 5 до 14, включительно. 
Столбцы назвать Средняя_цена и Стоимость, значения округлить до 2-х знаков после запятой.
select 
ROUND(avg(price), 2) as Средняя_цена,
ROUND(sum(price * amount), 2) as Стоимость
from book where amount between 5 and 14

#Задача 19 
Посчитать стоимость всех экземпляров каждого автора без учета книг «Идиот» и «Белая гвардия». 
В результат включить только тех авторов, у которых суммарная стоимость книг (без учета книг «Идиот» и «Белая гвардия») более 5000 руб. 
Вычисляемый столбец назвать Стоимость. Результат отсортировать по убыванию стоимости.
select 
author,
SUM(price * amount) as Стоимость
from book
where title not in ("Идиот", "Белая гвардия")
group by author
having Стоимость > 5000
order by Стоимость desc

#Задача 20 ВЛОЖЕННЫЕ ЗАПРОСЫ
Вывести информацию (автора, название и цену) о  книгах, цены которых меньше или равны средней цене книг на складе. 
Информацию вывести в отсортированном по убыванию цены виде. Среднее вычислить как среднее по цене книги.
select author, title, price from book
where price <= (select avg(price) from book)
order by price desc

#Задача 21
Вывести информацию (автора, название и цену) о тех книгах, цены которых превышают минимальную цену книги на складе не более чем на 150 рублей.
Предоставить в тсортированном по возрастанию цены виде.
select author, title, price from book
where ABS(price - (select min(price) from book) <= 150)
order by price asc

#Задача 22
Вывести информацию (автора, книгу и количество) о тех книгах, количество экземпляров которых в таблице book не дублируется.
select author, title, amount from book
where amount in (select amount from book group by amount having count(amount)=1)

#Задача 23
Вывести информацию о книгах(автор, название, цена), цена которых меньше самой большой из минимальных цен, вычисленных для каждого автора.
SELECT author, title, price
FROM book
WHERE price < ANY (
            SELECT min(price)
            FROM book
            GROUP BY author)

#Задача 24
Вывести информацию о книгах, количество экземпляров которых отличается от среднего количества экземпляров книг на складе более чем на 3.
Также указать среднее значение количества экземпляров книг.
SELECT title, author, amount, 
    (
     SELECT AVG(amount) 
     FROM book
    ) AS Среднее_количество 
FROM book
WHERE abs(amount - (SELECT AVG(amount) FROM book)) >3;

#Задача 25
Посчитать сколько и каких экземпляров книг нужно заказать поставщикам, чтобы на складе стало одинаковое количество экземпляров каждой книги, равное значению самого большего количества экземпляров одной книги на складе. 
Вывести название книги, ее автора, текущее количество экземпляров на складе и количество заказываемых экземпляров книг. 
Последнему столбцу присвоить имя Заказ. 
SELECT title, author, amount, ABS((
    SELECT MAX(amount)
    FROM book) - amount
    ) as Заказ
FROM book
WHERE amount <> (SELECT MAX(amount)
                FROM book)

#Задача 26
Занесите в таблицу supply четыре записи, чтобы получилась следующая таблица:
INSERT INTO supply VALUES 
    (1, "Лирика", "Пастернак Б.Л.", 518.99, 2),
    (2, "Черный человек", "Есенин С.А.", 570.20, 6),
    (3, "Белая гвардия", "Булгаков М.А.", 540.50, 7),
    (4, "Идиот", "Достоевский Ф.М.", 360.80, 3)

#Задача 27
Добавить из таблицы supply в таблицу book, все книги, кроме книг, написанных Булгаковым М.А. и Достоевским Ф.М.
INSERT INTO book (title, author, price, amount)
SELECT title, author, price, amount from supply where author not in ("Булгаков М.А.","Достоевский Ф.М.")

#Задача 28
Занести из таблицы supply в таблицу book только те книги, авторов которых нет в  book.
INSERT INTO book (title, author,price, amount)
SELECT title, author, price, amount from supply WHERE author not in (SELECT author from book)

#Задача 29
Уменьшить на 10% цену тех книг в таблице book, количество которых принадлежит интервалу от 5 до 10, включая границы.
UPDATE book SET price = price * 0.9
WHERE amount between 5 and 10

#Задача 30
В таблице book необходимо скорректировать значение для покупателя в столбце buy таким образом, чтобы оно не превышало количество экземпляров книг, указанных в столбце amount. 
А цену тех книг, которые покупатель не заказывал, снизить на 10%.
UPDATE book SET buy = IF(buy > amount, amount, buy),
price = IF(buy = 0, price * 0.9, price);

#Задача 31
Для тех книг в таблице book , которые есть в таблице supply, не только увеличить их количество в таблице book 
( увеличить их количество на значение столбца amountтаблицы supply), 
но и пересчитать их цену (для каждой книги найти сумму цен из таблиц book и supply и разделить на 2).
UPDATE book, supply 
SET book.amount = book.amount + supply.amount,
book.price = (book.price + supply.price) / 2
where book.title = supply.title;

#Задача 32
Удалить из таблицы supply книги тех авторов, общее количество экземпляров книг которых в таблице book превышает 10.
DELETE FROM supply where author IN (SELECT author FROM book where amount >= 10);

#Задача 33
Вывести из таблицы trip информацию о командировках тех сотрудников, фамилия которых заканчивается на букву «а», в отсортированном по убыванию даты последнего дня командировки виде. 
В результат включить столбцы name, city, per_diem, date_first, date_last.
SELECT name, city, per_diem, date_first, date_last FROM trip
WHERE name like "%а _._."
ORDER BY date_last DESC

#Задача 34
Вывести в алфавитном порядке фамилии и инициалы тех сотрудников, которые были в командировке в Москве.
SELECT distinct(name) FROM trip
WHERE city = "Москва"
ORDER BY name ASC

#Задача 35
Для каждого города посчитать, сколько раз сотрудники в нем были.  
Информацию вывести в отсортированном в алфавитном порядке по названию городов. Вычисляемый столбец назвать Количество. 
SELECT city, count(name) as Количество FROM trip
GROUP BY city
ORDER BY city ASC

#Задача 36
Вывести два города, в которых чаще всего были в командировках сотрудники. Вычисляемый столбец назвать Количество.
SELECT city, count(name) as Количество FROM trip
GROUP BY city
ORDER BY Количество DESC
LIMIT 2

#Задача 37
Вывести информацию о командировках во все города кроме Москвы и Санкт-Петербурга 
(фамилии и инициалы сотрудников, город ,  длительность командировки в днях, при этом первый и последний день относится к периоду командировки). 
Последний столбец назвать Длительность. Информацию вывести в упорядоченном по убыванию длительности поездки, а потом по убыванию названий городов (в обратном алфавитном порядке).
SELECT name, city, (DATEDIFF(date_last , date_first) + 1) AS Длительность FROM trip
WHERE city not in ("Москва","Санкт-Петербург")
ORDER BY Длительность DESC, city DESC

#Задача 38
Вывести информацию о командировках сотрудника(ов), которые были самыми короткими по времени. В результат включить столбцы name, city, date_first, date_last.
SELECT name, city, date_first, date_last FROM trip
WHERE 
DATEDIFF(date_last , date_first) =  (SELECT MIN(DATEDIFF(date_last, date_first)) AS amount FROM trip)

#Задача 39
Вывести информацию о командировках, начало и конец которых относятся к одному месяцу (год может быть любой). 
В результат включить столбцы name, city, date_first, date_last. Строки отсортировать сначала  в алфавитном порядке по названию города, а затем по фамилии сотрудника .
SELECT name, city, date_first, date_last FROM trip
WHERE MONTH(date_first) = MONTH(date_last)
ORDER BY city ASC, name ASC

#Задача 30
Вывести название месяца и количество командировок для каждого месяца. 
Считаем, что командировка относится к некоторому месяцу, если она началась в этом месяце. 
Информацию вывести сначала в отсортированном по убыванию количества, а потом в алфавитном порядке по названию месяца виде. Название столбцов – Месяц и Количество.
SELECT 
(MONTHNAME(date_first)) AS Месяц,
(count(trip_id)) AS Количество
FROM trip
GROUP BY Месяц
ORDER BY Количество DESC, Месяц ASC

#Задача 40
Вывести сумму суточных (произведение количества дней командировки и размера суточных) для командировок, первый день которых пришелся на февраль или март 2020 года. 
Значение суточных для каждой командировки занесено в столбец per_diem. Вывести фамилию и инициалы сотрудника, город, первый день командировки и сумму суточных. 
Последний столбец назвать Сумма. 
Информацию отсортировать сначала  в алфавитном порядке по фамилиям сотрудников, а затем по убыванию суммы суточных.
SELECT name, city, date_first, (per_diem * (DATEDIFF(date_last, date_first) + 1)) as Сумма FROM trip
WHERE MONTHNAME(date_first) = "February" OR MONTHNAME(date_first) = "March"
ORDER BY name ASC, Сумма DESC

#Задача 41
Вывести фамилию с инициалами и общую сумму суточных, полученных за все командировки для тех сотрудников, которые были в командировках больше чем 3 раза, 
в отсортированном по убыванию сумм суточных виде. Последний столбец назвать Сумма.
SELECT name, sum(per_diem * (DATEDIFF(date_last, date_first) + 1)) as Сумма FROM trip
WHERE name in (SELECT name FROM trip GROUP BY name HAVING count(name) > 3)
GROUP BY name
ORDER BY Сумма DESC


#Задача 42
INSERT INTO fine VALUES 
(6, "Баранов П.Е.","Р523ВТ","Превышение скорости(от 40 до 60)", null, "2020-02-14", null),
(7, "Абрамова К.А.", "О111АВ", "Проезд на запрещающий сигнал", null, "2020-02-23", null),
(8, "Яковлев Г.Р.", "Т330ТТ", "Проезд на запрещающий сигнал", null, "2020-03-03", null)

#Задача 43
Занести в таблицу fine суммы штрафов, которые должен оплатить водитель, в соответствии с данными из таблицы traffic_violation. 
При этом суммы заносить только в пустые поля столбца  sum_fine.
UPDATE fine f, traffic_violation t SET f.sum_fine = IF(f.sum_fine IS NULL, t.sum_fine, f.sum_fine)
WHERE f.violation = t.violation

#Задача 44
Вывести фамилию, номер машины и нарушение только для тех водителей, которые на одной машине нарушили одно и то же правило два и более раз. 
При этом учитывать все нарушения, независимо от того оплачены они или нет. 
Информацию отсортировать в алфавитном порядке, сначала по фамилии водителя, потом по номеру машины и, наконец, по нарушению.
SELECT name, number_plate, violation
FROM fine
GROUP BY name, number_plate, violation
HAVING count(*) >= 2
ORDER BY name, number_plate, violation

#Задача 45
В таблице fine увеличить в два раза сумму неоплаченных штрафов для отобранных на предыдущем шаге записей. 
UPDATE fine SET sum_fine = sum_fine * 2
WHERE name = "Абрамова К.А." AND number_plate = "О111АВ" AND violation = "Проезд на запрещающий сигнал" AND date_payment IS NULL
OR
name = "Баранов П.Е." AND number_plate = "Р523ВТ" AND violation = "Превышение скорости(от 40 до 60)"  AND date_payment IS NULL;

#Задача 46

#Задача 47